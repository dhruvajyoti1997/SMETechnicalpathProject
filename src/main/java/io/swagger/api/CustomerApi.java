/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.Customer;
import io.swagger.model.CustomerUpdate;
import io.swagger.model.Error;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-08-24T07:46:52.134Z")

@Validated
@Api(value = "customer", description = "the customer API")
@RequestMapping(value = "/tmf-api/customerManagement/v4/")
public interface CustomerApi {

	@ApiOperation(value = "Creates a Customer", nickname = "createCustomer", notes = "This operation creates a Customer entity.", response = Customer.class, tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Customer.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
			@ApiResponse(code = 409, message = "Conflict", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/customer", produces = { "application/json;charset=utf-8" }, consumes = {
			"application/json;charset=utf-8" }, method = RequestMethod.POST)
	ResponseEntity<Customer> createCustomer(
			@ApiParam(value = "The Customer to be created", required = true) @Valid @RequestBody Customer customer);

	@ApiOperation(value = "Deletes a Customer", nickname = "deleteCustomer", notes = "This operation deletes a Customer entity.", tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Deleted"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found", response = Error.class),
			@ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
			@ApiResponse(code = 409, message = "Conflict", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/customer/{id}", produces = { "application/json;charset=utf-8" }, consumes = {
			"application/json;charset=utf-8" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteCustomer(
			@ApiParam(value = "Identifier of the Customer", required = true) @PathVariable("id") Long id);

//    @ApiOperation(value = "List or find Customer objects", nickname = "listCustomer", notes = "This operation list or find Customer entities", response = Customer.class, responseContainer = "List", tags={ "customer", })
//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "Success", response = Customer.class, responseContainer = "List"),
//        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
//        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
//        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
//        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
//        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
//        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
//        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
//    @RequestMapping(value = "/customer",
//        produces = { "application/json;charset=utf-8" }, 
//        consumes = { "application/json;charset=utf-8" },
//        method = RequestMethod.GET)
//    ResponseEntity<List<Customer>> listCustomer(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit);
//

	@ApiOperation(value = "List or find Customer objects", nickname = "listCustomer", notes = "This operation list or find Customer entities", response = Customer.class, responseContainer = "List")
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Success", response = Customer.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found", response = Error.class),
			@ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
			@ApiResponse(code = 409, message = "Conflict", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/retrieveCustomer", method = RequestMethod.GET)
	ResponseEntity<List<Customer>> listCustomer();

//	@RequestMapping(value = "/{field}", method = RequestMethod.GET)
//	ResponseEntity<List<Customer>> listCustomerWithSorting(@PathVariable String field);

	@RequestMapping(value = "/{limit}", method = RequestMethod.GET)
	ResponseEntity<List<Customer>> listCustomerWithSLimit(@PathVariable int limit);

	@ApiOperation(value = "Updates partially a Customer", nickname = "patchCustomer", notes = "This operation updates partially a Customer entity.", response = Customer.class, tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Updated", response = Customer.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found", response = Error.class),
			@ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
			@ApiResponse(code = 409, message = "Conflict", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/customer/{id}", produces = { "application/json;charset=utf-8" }, consumes = {
			"application/json;charset=utf-8" }, method = RequestMethod.PATCH)
	ResponseEntity<Customer> patchCustomer(
			@ApiParam(value = "Identifier of the Customer", required = true) @PathVariable("id") Long id,
			@ApiParam(value = "The Customer to be updated", required = true) @Valid @RequestBody Map<Object, Object> objectMap);

	@ApiOperation(value = "Retrieves a Customer by ID", nickname = "retrieveCustomer", notes = "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes.", response = Customer.class, tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Success", response = Customer.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found", response = Error.class),
			@ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
			@ApiResponse(code = 409, message = "Conflict", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/customer/{id}", method = RequestMethod.GET)
	ResponseEntity<Customer> retrieveCustomer(
			@ApiParam(value = "Identifier of the Customer", required = true) @PathVariable("id") Long id);

	@ApiOperation(value = "Update  Customer Details", nickname = "patchCustomer", notes = "This operation updates Customer entity.", response = Customer.class, tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Updated", response = Customer.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found", response = Error.class),
			@ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
			@ApiResponse(code = 409, message = "Conflict", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/customer/updateDetails", produces = { "application/json;charset=utf-8" }, consumes = {
			"application/json;charset=utf-8" }, method = RequestMethod.PUT)
	ResponseEntity<Customer> updateCustomer(
			@ApiParam(value = "Identifier of the Customer", required = true) @Valid @RequestBody Customer customer);

}
